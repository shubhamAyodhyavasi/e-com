{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","services/redux/reducers/userReducer.js","services/redux/reducers/index.js","services/redux/type/user.js","services/redux/config/configureStore.js","index.js"],"names":["module","exports","withRouter","connect","state","user","className","src","logo","alt","href","target","rel","path","exact","component","props","Boolean","window","location","hostname","match","initialState","action","payload","type","middlewares","thunk","createStateSyncMiddleware","whitelist","persistConfig","key","storage","rootReducer","otherReducer","allReducers","combineReducers","persistedReducer","persistReducer","persistantStore","store","createStore","undefined","compose","applyMiddleware","persistor","persistStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,4NCkC3C,IAGeC,cACbC,aAJsB,SAAAC,GAAK,MAAK,CAChCC,KAAMD,EAAMC,QAGZF,EA/BF,WACE,OACE,yBAAKG,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,kBAAC,IAAD,KACI,kBAAC,IAAD,CACEC,KAAK,IACLC,OAAK,EACLC,UAAW,SAAAC,GAAK,OAAI,wBAASA,EAAT,iBChBZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DChBAC,EAAe,GCAN,GACXjB,KDCW,WAAmC,IAAlCD,EAAiC,uDAAzBkB,EAAcC,EAAW,uCACvCC,EAAkBD,EAAlBC,QAASC,EAASF,EAATE,KAEjB,OAAQA,GACN,IERoB,WFWpB,IEVsB,aFWpB,OAAOD,EAET,QACE,OAAOpB,K,sOGLb,IAAMsB,EAAc,CAChBC,IACAC,oCAA0B,CAEtBC,UAAW,CACP,WAKNC,EAAgB,CAClBC,IAAK,OACLC,YACAH,UAAW,CACP,SAaAxB,EAA0B4B,EAA1B5B,KAAS6B,E,YAAiBD,E,UAC5BE,EAAcC,Y,yVAAgB,CAAD,CAC/B/B,QACC6B,IAGCG,EAAmBC,YAAeR,EAAeK,G,gBChCjDI,EDkCS,WACX,IAAIC,EAAQC,YACVJ,OAEAK,EACAC,YAAQC,IAAe,WAAf,EAAmBlB,KAG7B,MAAO,CAAEc,QAAOK,UADAC,YAAaN,ICzCTA,GAExBO,IAASC,OACL,kBAAC,IAAD,CAAUR,MAAOD,EAAgBC,OAC7B,kBAAC,IAAD,CAAaS,QAAS,KAAMJ,UAAWN,EAAgBM,WACnD,kBAAC,IAAD,KACI,kBAAC,EAAD,SAIhBK,SAASC,eAAe,SL4GlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dcf55bef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport { connect } from 'react-redux'\r\n\r\nimport logo from './logo.svg';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n      <Switch>\r\n          <Route\r\n            path=\"/\"\r\n            exact\r\n            component={props => <div {...props} >Home</div>}\r\n          />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => ({\r\n  user: state.user,\r\n});\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n  )(App)\r\n);\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { SET_USER, UNSET_USER } from \"../type\";\r\n\r\nconst initialState = {};\r\n\r\nexport default (state = initialState, action) => {\r\n  const { payload, type } = action;\r\n\r\n  switch (type) {\r\n    case SET_USER:\r\n      return payload;\r\n\r\n    case UNSET_USER:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {default as user} from \"./userReducer\";\r\n\r\nexport default {\r\n    user\r\n}","export const SET_USER = \"SET_USER\";\r\nexport const UNSET_USER = \"UNSET_USER\";","import { createStore, applyMiddleware, compose, \r\n    combineReducers \r\n} from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n// import sessionStorage from \"redux-persist/lib/storage/session\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\nimport { createStateSyncMiddleware } from \"redux-state-sync\";\r\n\r\nconst middlewares = [\r\n    thunk,\r\n    createStateSyncMiddleware({\r\n        // blacklist: [\"extras\"]\r\n        whitelist: [\r\n            \"user\"\r\n        ]\r\n    })\r\n]\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage,\r\n    whitelist: [\r\n        \"user\"\r\n    ]\r\n}\r\n// const sessionRedConfig = {\r\n//     key: \"other\",\r\n//     storage: sessionStorage\r\n// };\r\n\r\n// const { referrer, ...otherReducer } = rootReducer;\r\n// const allReducers = combineReducers({\r\n    //   ...otherReducer,\r\n    //   referrer: persistReducer(sessionRedConfig, referrer)\r\n// });\r\nconst { user, ...otherReducer } = rootReducer;\r\nconst allReducers = combineReducers({\r\n    user,\r\n  ...otherReducer\r\n//   referrer: persistReducer(sessionRedConfig, referrer)\r\n});\r\nconst persistedReducer = persistReducer(persistConfig, allReducers);\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\nexport default () => {\r\n    let store = createStore(\r\n      persistedReducer,\r\n    //   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n      undefined,\r\n      compose(applyMiddleware(...middlewares))\r\n    );\r\n    let persistor = persistStore(store);\r\n    return { store, persistor };\r\n};\r\n  ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport store from \"./services/redux/config/configureStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst persistantStore = store();\r\n\r\nReactDOM.render(\r\n    <Provider store={persistantStore.store}>\r\n        <PersistGate loading={null} persistor={persistantStore.persistor}>\r\n            <BrowserRouter>\r\n                <App />\r\n            </BrowserRouter>\r\n        </PersistGate>\r\n    </Provider>,\r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}